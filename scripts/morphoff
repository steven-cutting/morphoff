#! /usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
__title__ = 'morphoff'
__author__ = 'Steven Cutting'
__author_email__ = 'steven.e.cutting@gmail.com'
__created_on__ = '04/09/2017'


import logging
import sys
import os
from os import path
import pickle
from collections import namedtuple

import click
from arrow import now
try:
    import cytoolz as tlz
    from cytoolz import curried as tlzc
except ImportError:
    import toolz as tlz
    from toolz import curried as tlzc

from h_topic_model import utils as u
# from h_topic_model import wcfile as wc
from h_topic_model import segment as seg

from morphoff import mkfcatmodel as fm
from morphoff import fcatsegment as fseg
from morphoff import mktokens as mkt
from morphoff import modelutils as mu

from morphoff import _scriptutils as su


LOG = logging.getLogger(__name__)
SCRIPT_NAME = __name__.split(".")[-1]
LOGFMT = '%(levelname)s:%(asctime)s:%(name)s\tscript-name:{s}\t%(message)s'.format(s=SCRIPT_NAME)

CWD = os.getcwd()
D_WC_FILE = "wc.csv"
D_WC_FILE_P = path.join(CWD, D_WC_FILE)
D_MORF_MODEL_FILE = "morfessor_model.bin"
D_MORF_MODEL_FILE_P = path.join(CWD, D_MORF_MODEL_FILE)
D_MORF_SEG_FILE = "morfessor_model-bin-segmentations.txt"
D_MORF_SEG_FILE_P = path.join(CWD, D_MORF_SEG_FILE)
D_FCAT_MODEL_FILE = "flatcat_model.tar.gz"
D_FCAT_MODEL_FILE_P = path.join(CWD, D_FCAT_MODEL_FILE)
D_SEG_COMP_FILE = "segments_pairs.csv"
D_SEG_COMP_FILE_P = path.join(CWD, D_SEG_COMP_FILE)

TSEGS_DEFAULT = (su.SegMdlFile("morfessor2.0", "morfessor2", D_MORF_MODEL_FILE_P),
                 su.SegMdlFile("flatcat", "flatcat", D_FCAT_MODEL_FILE_P))
TSEGS_DEFAULT_STR = "-M {} {}  -M {} {}".format(TSEGS_DEFAULT[0].name,
                                                TSEGS_DEFAULT[0].type,
                                                TSEGS_DEFAULT[0].filename,
                                                TSEGS_DEFAULT[1].name,
                                                TSEGS_DEFAULT[1].type,
                                                TSEGS_DEFAULT[1].filename)


@click.group()
@click.option("--loglvl", default="info", type=str,
              help="Logging level. Default info. Options: debug, info, warning, error, critical")
@click.option("--logfile", "-L", default=None, type=str,
              help="Write log messages to this file. Defaults to stdout.")
@click.option("--random_state", "-R", default=None, type=int,
              help="Random State. Allows for reproducible results.")  # TODO (sc) Improve help
@click.pass_context
def cli(ctx, loglvl, logfile, random_state):
    ctx.obj = {}
    ctx.obj["LOGFILE"] = logfile
    ctx.obj["STARTTIME"] = now()
    ctx.obj["RANDOMSTATE"] = random_state

    logging.basicConfig(format=LOGFMT,
                        level=su.str_to_log_level_code(loglvl),
                        stream=sys.stdout,
                        filename=logfile)
    logging.root.level = su.str_to_log_level_code(loglvl)
    logging.basicConfig


@cli.command(help="""
    Train a Flatcat segmentation model using a Morfessor model.
""")
@click.option("--wcfile", "-W", type=str, default=D_WC_FILE_P,
              help="".join(["Token source for morfessor-train. Default: ",
                            D_WC_FILE_P]))
@click.option("--morf_seg_file", "-M", type=str, default=D_MORF_SEG_FILE_P,
              help="".join(["Load this file containing morfessor segmentations. Default: ",
                            D_MORF_SEG_FILE_P]))
@click.option("--fcat_model_file", "-S", type=str, default=D_FCAT_MODEL_FILE_P,
              help="".join(["Save this flatcat model to supplied file. Default: ",
                            D_FCAT_MODEL_FILE_P]))
@click.option("--encoding", "-E", default="utf-8",
              help="Character encoding of the wcfile file.")
@click.pass_context
def flatcat(ctx, fcat_model_file, morf_seg_file, wcfile, encoding):
    LOG.info("Starting flatcat")
    randomState = ctx.obj["RANDOMSTATE"]

    model = fm.fit_flatcat_model(morf_seg_file, randomState=randomState)
    fm.save_flatcat_model(fcat_model_file, model)

    su.log_run_time(ctx.obj["STARTTIME"])
    LOG.info("Finished flatcat")


@cli.command(help="""
    Creat segmentation comparison file.
""")
@click.argument("input_directory")
@click.option("--model_files", "-M", nargs=3, type=(unicode, unicode, unicode),
              multiple=True,
              callback=su.proc_tsegs_option_input,
              default=TSEGS_DEFAULT,
              help="".join(["File paths and metadata for segmentation models to use. Default: ",
                            TSEGS_DEFAULT_STR]))
@click.option("--seg_file", "-s", type=str, default=D_SEG_COMP_FILE_P,
              help="".join(["Save the segment comparison to supplied file. Default: ",
                            D_SEG_COMP_FILE_P]))
@click.option("--prob", "-P", default=1.0, type=float,
              help="Probability a file will be chosen. Create a random sample. 1.0 = 100%")
@click.pass_context
def testsegs(ctx, input_directory, model_files, seg_file, prob):
    LOG.info("Starting testsegs")

    # -- Loading Models --
    LOG.info("Loading models")
    # TODO (sc) add useful replacement for KeyError.
    segmenter = tlz.pipe(model_files,
                         tlzc.map(lambda model: (model.type, model.filename)),
                         mu.load_seg_models,
                         mkt.mk_segmenters)

    # -- Finding and Loading input files --
    LOG.info("Loading input files from: {}".format(input_directory))
    filenames = tlz.random_sample(prob=prob,
                                  seq=u.spelunker_gen(input_directory),
                                  random_state=ctx.obj["RANDOMSTATE"])

    LOG.info("Loading and cleaning the text.")
    txts = list(tlz.map(u.load_and_decode, filenames))

    LOG.info("Number of files {}.".format(len(txts)))

    # -- Tokenizing input texts --
    LOG.info("Creating segmented tokens.")

    tokens = tlz.pipe(txts,
                      mkt.segment_many(segmenter),
                      mkt.to_string_pairs(separator=" + "),  # TODO (sc) allow custom sep.
                      mkt.unique)

    LOG.info("Writing segments to file")
    mkt.segments_to_cvs(seg_file, tokens,
                        headers=tuple(tlz.concat([["original"],
                                                  tlz.map(lambda model: model.name,
                                                          model_files)])),
                        sort_f=lambda t: sorted(t, key=tlz.first))

    su.log_run_time(ctx.obj["STARTTIME"])
    LOG.info("Finished testsegs")


if __name__ == "__main__":
    cli()
